name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # --------------------------------------------------
  # 1) Build job (runs on three OSes in parallel)
  # --------------------------------------------------
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_YTDLP }}
          GH_TOKEN: ${{ secrets.PAT_FOR_YTDLP }}
          GITHUB_API_TOKEN: ${{ secrets.PAT_FOR_YTDLP }}
        

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build

      # Upload the built Electron artifacts for each OS
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist_electron

  # --------------------------------------------------
  # 2) Release job (runs after build completes)
  # --------------------------------------------------
  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      # ------------------------------------------------
      # (A) Download each OS’s artifacts into subfolders
      # ------------------------------------------------
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-windows-latest
          path: dist_electron/windows

      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-ubuntu-latest
          path: dist_electron/linux

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-macos-latest
          path: dist_electron/mac

      # ------------------------------------------------
      # (B) Create a single GitHub Release 
      #     with automatically generated release notes
      # ------------------------------------------------
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------------------------------
      # (C) Attach each platform’s executables 
      #     to the release (one step per OS)
      # ------------------------------------------------
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist_electron/windows/*.exe
          asset_name: windows-installer.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist_electron/linux/*.AppImage
          asset_name: linux.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist_electron/mac/*.dmg
          asset_name: mac.dmg
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
